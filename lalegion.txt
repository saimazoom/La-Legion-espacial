
 La Legión Espacial
======================
Links:
 https://chuntey.wordpress.com/2012/12/18/how-to-write-zx-spectrum-games-chapter-1/
 https://www.z88dk.org/wiki/doku.php?id=optimization
 https://damieng.com/typography/zx-origins/
 http://www.worldofspectrum.org/ZXBasicManual/
 http://www.breakintoprogram.co.uk/programming/assembly-language/z80/z80-library-routines/output-asm

TODO: 
Versión 48K
  - Hablar con el ordenador
  - Pantallas por cada localidad 
  - Menú de juego 
  - FIN permite terminar la partida y resetea el ordenador.
  
Versión 128K
  - Música en el menú principal
   
Optimizar el código:
  - SAVE/LOAD 
  - RAMSAVE/RAMLOAD 
  - UNDO para el último movimiento 
  - Autocompletar basado en el texto de la localidad y el inventario 
  - Colores en la fuente cuando habla el ordenador (toda la frase)
  - Implementar atrezzo:
    Object atrezzo_blaus_porche blaus_porche
    class decorado
    with describir 
        'ruedas' "Llevan bastantes kilómetros encima." G_FEMENINO+G_PLURAL
        'rueda' "" G_FEMENINO
        'parachoques' "" G_MASCULINO + G_PLURAL
        'capota' "" G_FEMENINO
        'techo' "" G_MASCULINO
        'cerradura' "" G_FEMENINO
        'ventana' "Mosaico multicolor en la primera planta y sencillas en el desván." G_FEMENINO
        'ventanas' "Mosaico multicolor en la primera planta y sencillas en el desván." G_FEMENINO+G_PLURAL
        'ventanal' "Mosaico multicolor en la primera planta y sencillas en el desván." G_MASCULINO
        'ventanales' "Mosaico multicolor en la primera planta y sencillas en el desván." G_MASCULINO+G_PLURAL;

25 Diciembre 2019 
+ Bug del scroll que deja de vez en cuando una línea en blanco.
+ Bug con el espaciado, aparecen espacios en blanco no esperados...

Optimizando el código de imprimir hemos bajado a 34003bytes.

> He probado con el sevenUP a exportar a bin la localidad del exterior y al comprimir el bin sólo baja de 1301 (pantalla completa) a 1291bytes (pantalla recortada). No merece la pena recortar la imagen.

35338bytes y ya tenemos la primera pantalla funcionando :)


24 Diciembre 2019
> Transición a rutinas en ASM para caracteres monoespaciados. Las rutinas en asm de http://www.breakintoprogram.co.uk/programming/assembly-language/z80/z80-library-routines/output-asm, pero tengo que adaptarlas a mi caso en particular. 

File size: 33320bytes y sólo falta adaptar el ASM. Hemos ganado en torno 2KB. 

Ya tengo las rutinas de impresión funionando, no ha sido tan complicado como esperaba. El cambio más importante ha sido eliminar los ajustes al píxel que tenía para pasarlos a filas y columnas de Spectrum. 
+ El input del jugador sale descolocado en la pantalla

Pues todo funcionando, ha sido cuestión de una par de horas. Cuando lo integré con las fzx tuve muchos problemas con los márgenes y parpadeos de las rutinas de dibujado, ahora ha sido suave :-). Ahora a buscar un juego chulo de caracteres de 8x8 que además nos va a permitir fácilmente añadir colores a los textos. 

En cuestión de segundos he podido reemplazar la fuente por una de 8bit, nada que ver con las complicaciones de las fzx. ¡Mil gracias damienG por las fuentes!

+ He añadido los caracteres en castellano usando el FZX FONT EDITOR que funciona directamente con los ficheros .chr 

https://damieng.com/typography/zx-origins/reynolds
Con las fuentes incrustadas el código está en 34156bytes
Todavía tengo que adelgazar el juegos unos pocos Kb. 

+ Salen algunas letras corruptas. He encontrado un bug en la librería que estoy usando para las fuentes, al incrementar L si llega a 00 no incrementa H. 

+ Se cuelga si cambio el tamaño de la ventana de texto y me salgo de la zona de pantalla. -> Estaba llamando con un tamaño demasiado grande a la rutina de creación de la ventana de texto. 

Ahora sólo queda dibujar las pantallas y buscar la manera de optimizar el código para ganar algunos Kb y meter las 7/8 pantallas en memoria.

No hay mejora al juntar varios IFs bajo un switch. Raspo algunos bytes al declarar funciones como __FASTCALL__.

Añado CNDverb para para ver si es menos costoso que comparar cada vez en el IF el flag con el id del verbo. De momento 34155bytes.

Veo que el compilador funciona distinto en respuestas y respuestas_post para una simple comparación de un valor:

respuestas:
	ld	a,(_flags+33)
	cp	#(44 % 256)
	jp	nz,i_59

pero en respuestas_post:
	ld	a,(_flags+33)
	ld	e,a
	ld	d,0
	ld	hl,23	;const
	call	l_eq
	jp	nc,i_240


por eso una llamada a función en respuestas_post es más ecómomica pero no en respuestas:
con función en respuestas_post:
	ld	hl,23 % 256	;const
	call	_CNDverb
	ld	a,h
	or	l
	jp	z,i_240

34108bytes antes depasar respuestas_post a respuestas.

Al mover el bloque y eliminar las llamadas a la función ha empeorado hasta 34194bytes

De nuevo aparece esto en las comparaciones:

	ld	a,(_flags+33)
	ld	e,a
	ld	d,0
	ld	hl,23	;const
	call	l_eq
	jp	nc,i_240

El compilar toma deficiones en función del contenido del if, he visto que por ejemplo si se llama a ACCmessage toma laopción corta pero si se llama a ACCautor toma la solución de más bytes.

Esto no son sino miserias del compilador, hay que buscar el ahorro por otro lado.
Vuelvo al código tal y como estaba antes y ahora por un misterioso motivo ha bajado a 34096bytes. Hay que admitir +-100bytes debido a las optimizaciones del compilador. 

23 Diciembre 2019
 Casi Navidad y los niños están super nerviosos por los regalos :-D 
  + Examinar/Abrir/Empujar paquetes en la bodega
  + Los objetos no aparecen listados en la localidad
  + El traje no está en la esclusa 
  + Se pueden coger/dejar objetos con el atributo aStatic/aScenery. Faltabba comprobar el atributo en parser.c
  + Pulsar botón rojo/verde no funciona. 
    + Faltaba el verbo Pulsar 
    + Falta un mensaje en caso de pulsar sólo el botón 
    + El parser no reconoce el adjetivo. Ahora la lista de adjetivos forma parte del código del juego y no del parser. 
 + Una vez en el inventario no podemos examinar el traje. Faltaba la acción de examinar el traje en las respuestas. 
 + Ponerse/quitarse el traje no funciona. Faltaba una línea para comprobar el objeto en ACCautow X-) 
 > Ya podemos salir al exterior.
+ Listar el inventario en fila añadiendo (puesto), (encendido),etc	
+ He podido terminar el juego pero con algunos errores en los mensajes. 
+ Se pueden añadir conexiones a las localidades, para la entrada del almacén.

@ZonaA2:
+Coge paquete: No ves eso por aquí.
+Ex indicador: No ves eso por aquí. pero Ex etiqueta funciona 

¡La secuencia del final se ejecuta y el juego termina!
35396bytes sin debugger 

lExterior 1301bytes 

Para 8 pantallas necesitamos: 10408bytes
Tenemos 40960bytes - 35396 = 5564bytes 

Hay que conseguir unos 5Kb más mediante optimización del código. 

Eliminando la librería FZX de fuentes baja a 32873bytes ->  2523bytes

Voy a prescindir de FZX realmente nunca ha funcionado demasiado bien, y me ha dado gran cantidad de problemas el ajustar los tamaños y el borrar las fuentes. Voy a pasar de momento a fuente mono-espaciada. 

Por compatibilidad paso las funciones y las estructuras a libgfx.

Ahora 33208bytes, una bajada de 2Kb pero todavía no he metido las rutinas de impresión ni los caracteres. Pero bueno, la diferencia es que ahora las rutinas van a ser mucho más simples al no considerar el ancho variable de la antigua librería. 

Por compatibilidad he mantenido las estructuras de fzx, de ese modo no hay que cambiar mucho el código del parser. 

Pero de momento he vuelto a una bonita pantalla en negro...


22 Diciembre 2019
  + No podemos salir al exterior sin el traje
  + La compuerta se abre
  + Volver al interior de la nave con la esclusa correctamente cerrada y el traje quitado
  + Ponerse/quitarse el traje para acceder al interior/exterior
  + Teclear el password en el teclado
  + Todo el código portado a C. En total han sido 4 días, a 2h por día. 
  + Los verbos como saltar, cantar no dan la respuesta correcta. Al imprimir los mensajes los condactos ACCmes y ACCmessage estaban usando la posición en el array en lugar del identificador. 

35244bytes (2Kb aprox para el debugger) 

21 Diciembre 2019 
> ¡¡ Comienzan las vacaciones!! :-D
> Sigo portando código desde el original de DAAD 
+ Todas las descripciones
+ Fin del juego 
+ Añadida la librería base de La maldición de los reyes (¿Acabaré algún día ese juego?)
+Todo el vocabulario
parser.bin ocupa 33444bytes, el código en C se está mostrando bastante compacto pero todavía no he aplicado ninguna optimización.
+ Faltaba por añadir la localidad de la bodega
+ Ya podemos recorrer la nave

¡A por los puzzles!

15 Diciembre 2019
> Había olvidado poner a 1 el flag de luz, todo estaba oscuro...
> Más trabajo en la definición del transfondo, creo que está quedando bastante interesante. Que alegría volver a una historia y ver como crece de nuevo. 

9 Diciembre 2019 
> Tabla de mensajes completada 
> Es el momento de compilar y ver si podemos movernos por el mapa...
+ Instalar python 2.7 
+ Instalar ZEsarUX, ZEsarUX_win-beta-8.1

Primera compilación ocupa 31Kb, están todos los textos pero falta el código de la aventura y alguna función extra para los temas del ordenador. -> 10Kb free. (+2Kb de las funciones del debugger)

Para referencia futura la Release 3 en DAAD en Spectrum: 	> Versión de Spectrum funcionando sin problemas: 9855bytes free, DDBB 19800bytes pero sin posibilidad de ampliar a 128Kb la aventura.

EL primer mensaje ha sido "No puedo ver nada está muy oscuro", pero no se ha colgado X-)

8 Diciembre 2019 
> Ya he aclarado toda la historia y lo que contiene la caja. De momento todo trazado en el documento de diseño :-) escrito en Scrivener.
> Como primera piedra de toque con el parser voy a portar de nuevo ZHL, de este modo al ser una aventura corta me hago una idea de lo 
que puedo llegar a meter en 48Kb y en cualquier caso puedo tirar de paginación en modelos de 128Kb o bien de carga por bloques en C64. 

+ Añadida la tabla de temas de conversación con el ordenador basada en temas como en I7, de este modo ahorramos un montón de mensajes y de vocabulario que es exclusivo para la conversaciñon con el ordenador de abordo. 
+ Añadida la tabla de localidades
+ Añadida tabla de conexiones
+ Añadida tabla de objetos 
> Empiezo a portar el código del juego, sería buena idea en este punto intentar arrancar el juego y ver si puedo moverme por las localidades. 

26 Noviembre 2019 

> Nada que no me rindo, quiero sacar otro juego en mi querido Spectrum. Y quizá dar el salto a C64/CPC. La parte tecnológica creo que no va a caber en la memoria del 48Kb. Pero bueno, tirando de paginación seguro que podemos subir a los 128K. Para C64 puedo sacar una versión en disco/cartucho que permita cargar las páginas de memoria. 


17 Noviembre 2019 

> Sigo limpiando un poco el código, lo bueno de usar ahora GIT es que más adelante puedo tomar un comit cualquiera y usarlo como template para futuros juegos. 
> El principal problema que tengo en sistema de 8bit son los límites en el número de mensajes, pero en este caso puedo definir varias tablas de mensajes e includo conmutar entre ellas en varios bancos de memoria. 
> Parece que el plugin de bookmarks fu>nciona como debe y ya se pueden añadir líneas sin que pierda la refencia.

> Normalmente el flujo de trabajo comienza con la descripción de las localidades, el vocabulario, las conexiones y las descripciones. De este modo la aventura se pone en marcha muy rápido, los gráficos vienen el final. Lo malo de esta aproximación es que siento que los gráficos se convierten en redundantes y no me pongo nunca a trabajar en ellos. Aquí es donde me vendría bien un poco de ayuda externa :-)

> Los juegos de ZHL se basan en la interacción con PNJs, es básico crear librerías de scripts para las conversaciones y las funciones básicas de movimiento y conversación con los PNJ. 

> Encapsular todo lo posible las funciones gráficas, de este modo luego puedo generar versiones para otros sistemas. 
> El estilo gráfico para ZHL es el de línea clara en contraste con el utilizado para La Maldición donde empleaba imágenes digitalizadas y luego retocadas para verse en color. 

Update: Abandono el proyecto debido a que casi toda la historia ya existe en "The Expanse" la serie de novelas/TV, pero todo ... todo incluído los portales, la antigua civilización, los viajes a baja velocidad por el sistema solar. 

Supongo que todo era demasiado típico o predecible. 


16 Noviembre 2019 

> Pues aquí estoy de nuevo, llevo unos días activo con el DIA y he pasado a limpio el flujo del juego y el mapa. 
> He reorganizado el Git para poder tener un repositorio distinto del parter y de los juegos. Asi que ahora tenemos: La legión espacial, La maldición de los reyes y zminif en git. 

> Hace tiempo me he replanteado el motivo de escribir un relato y de la responsabilidad de la información que intento transmitir. Cada relato debe tener un mensaje, algo que contar. De otro modo se trata de un producto, orientado a generar actos de lectura/visionado en masa. Para conseguirlo es necesario historias sencillas de seguir, que encajen bien en las expectativas del público para que se sientan bien y la espectacularidad. Lo interesante es conseguir todo eso y además el contar una historia que signifique algo, que además de ver/leer tu historia el lector se lleve algo que le acompañe y le haga pensar y ver las cosas de otra manera. 

Las historias son poderosas, son el vehículo que ha empleado la humanidad durante millones de años para transmitir información. 

2 Junio 2019 

> He limpiado el código de minif y lo he subido a GIT. Tengo que mantener el parser y el juego por separado para poder
seguir desarrollando el parser sin referencias cruzadas.
> Branch creada para la Legión, otra aventura corta ambientada en el universo de ZHL. 

Sinopsis:
ZHL SIDE A: Tod Connor
ZHL SIDE B: Patricia Moons

 Patricia Moons es una periodista embebida en un escuadrón militar llamado la Legión espacial varios años antes de ZHL. Durante
su misión descienden un nuevo planeta y encuentran un teletransporte que lleva a un mundo subterráneo habitado por gigantes. 

 Un legionario es decapitado por uno de los gigantes y el portal es sellado para evitar males mayores. La cabeza del legionario
es guardada en un contenedor azul para su posterior estudio. 

En la aventura somos Patricia Moons acompañando al legionario e intentando averiguar todo lo posible sobre la misión. Toda la 
aventura se basa en diálogo y en los PNJ militares. 

Ambientación nocturna, altas temperaturas, zonas de volcanes muy próximas. 

El desarrollo se basa en ZMinif utilizado en desarrollo incompleto de Cafaz/La Maldición de los Reyes. El mapa de memoria ya está
pensado para versiones de 128Kb, pero el objetivo es desarrollar aventuras para 48Kb empleando sólo 16-21Kb para la aventura y los 20Kb inferiores
para el parser y las variables. El DAAD emplea unos 13Kb, pero no tiene la flexibilidad de programar en C, no soporta zx7, librerias de audio y fuentes proporcionales ni tampoco la paginación en modelos con 128Kb o más. 




